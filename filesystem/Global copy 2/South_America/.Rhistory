table <- page %>%
html_nodes("table.covid19-testing.wikitable") %>%
html_table() %>%
as.data.frame()
len_table <- table %>% dim() %>% first()
print(len_table)
if (len_table == 0){
table <- page %>%
html_nodes("table.wikitable") %>%
html_table() %>%
first() %>% as.data.frame()
}
col_names <- colnames(table)
if ("Tests.U.2009..mil..people" %in% col_names){
table <- table %>%
rename(country = Country.or.region,
as_of_date = As.of,
test_per_million = Tests.U.2009..mil..people,
positive_per_thousand_tests = Positive.U.2009..1.000.tests)
} else if ("Tests /mil. people" %in% col_names){
table <- table %>%
rename(country = `Country or region`,
as_of_date = `As of`,
test_per_million = "Tests /mil. people",
positive_per_thousand_tests = "Positive /1,000 tests")
} else if ("Tests /million" %in% col_names) {
table <- table %>%
rename(country = `Country or region`,
as_of_date = `As of`,
test_per_million = "Tests /million",
positive_per_thousand_tests = "Positive /1,000",
Tests = "Total Tests")
} else {
table <- table %>%
rename(country = Country.or.region,
as_of_date = As.of,
test_per_million = Tests.U.2009..millionpeople,
positive_per_thousand_tests = Positive.U.2009..thousandtests)
}
View(table)
table_t <- table %>%
mutate(country = if_else(Country == "Province or region",
Country,
paste(Country,":  ",`Province or region`, sep = "")))
View(table_t)
table_t <- table %>%
group_by(row_number()) %>%
mutate(country = if_else(Country == "Province or region",
Country,
paste(Country,":  ",`Province or region`, sep = ""))) %>%
ungroup()
table_t <- table %>%
mutate(country = if_else(Country == `Province or region`,
Country,
paste(Country,":  ",`Province or region`, sep = "")))
col_names <- colnames(table)
col_names
View(wikipedia_results)
table_t <- table %>%
mutate(country = if_else(Country == `Province or region`,
Country,
paste(Country,":  ",`Province or region`, sep = ""))) %>%
rename(as_of_date = `As of`,
test_per_million = "Tests /million",
positive_per_thousand_tests = "Positiveper 1,000",
Tests = "Totaltests[a]",
Positive = "Positive[b]")
View(table_t)
table <- table %>%
mutate(country = if_else(Country == `Province or region`,
Country,
paste(Country,":  ",`Province or region`, sep = ""))) %>%
rename(as_of_date = `As of`,
test_per_million = "Tests /million",
positive_per_thousand_tests = "Positiveper 1,000",
Tests = "Totaltests[a]",
Positive = "Positive[b]")
table <- table %>%
mutate(as_of_date = str_replace(as_of_date, pattern = "Mar", replacement = "03") %>%
str_replace(pattern = "Apr", replacement = "04") %>%
str_replace(pattern = "Feb", replacement = "02") %>%
as_date(format = "%d %m", tz = ""),
Tests = tidy_number(Tests),
Positive = tidy_number(Positive),
test_per_million = tidy_number(test_per_million),
positive_per_thousand_tests = tidy_number(positive_per_thousand_tests))
wikipedia_results <- wikipedia_results %>%
bind_rows(table)
url <- "https://web.archive.org/web/20200311081530/https://en.wikipedia.org/wiki/COVID-19_testing"
print(substr(url, start=29,stop = 36))
page <- read_html(url)
table <- page %>%
html_nodes("table.covid19-testing.wikitable") %>%
html_table() %>%
as.data.frame()
len_table <- table %>% dim() %>% first()
print(len_table)
if (len_table == 0){
table <- page %>%
html_nodes("table.wikitable") %>%
html_table() %>%
first() %>% as.data.frame()
}
table <- page %>%
html_nodes("table.wikitable") %>%
html_table()
table <- page %>%
html_nodes("table.wikitable") %>%
html_table(fill =T)
table <- page %>%
html_nodes("table.wikitable") %>%
html_table(fill =T) %>%
first() %>% as.data.frame()
View(table)
tests_summary <- wikipedia_results %>%
group_by(country, as_of_date) %>%
summarise(total_tests = max(Tests),
positives = max(Positive),
tests_per_million = max(test_per_million),
positive_per_thousand_tests = max(positive_per_thousand_tests)) %>%
ungroup() %>%
arrange(desc(as_of_date),country)
write_delim(tests_summary, "20200405_wikipedia_scrapes.txt", delim ="\t")
library(tidyverse)
write_delim(tests_summary, "20200405_wikipedia_scrapes.txt", delim ="\t")
#WORLDOMETER----
url_worldometer <- "https://www.worldometers.info/coronavirus/"
page_worldometer <- read_html(url_worldometer)
df_worldometer <- page_worldometer %>%
html_nodes(".table") %>%
first() %>%
html_table()
View(df_worldometer)
#US States----
url_us_states <- "https://www.worldometers.info/coronavirus/country/us/"
page_us_states <- read_html(url_us_states)
df_us_states <- page_us_states %>%
html_nodes(".table") %>%
first() %>%
html_table()
df_06_apr <- df_worldometer %>%
bind_rows(df_us_states)
region_names <- tests_summary %>%
distinct(country)
View(region_names)
region_names <- tests_summary %>%
distinct(country) %>%
arrange()
View(region_names)
tests_summary <- tests_summary %>%
mutate(country = str_replace(country, pattern = "^ ", replacement = ""))
region_names <- tests_summary %>%
distinct(country) %>%
arrange()
View(region_names)
region_names
region_names %>% pull(country)
region_names <- tests_summary %>%
distinct(country) %>%
arrange(country)
region_names %>% pull(country)
tests_summary <- tests_summary %>%
mutate(country = case_when(
country %in% c("Canada:  AB", "Canada:  Alberta", "Canada  Alberta") ~ "Canada_Alberta",
country %in% c("Canada:  BC", "Canada:  British Columbia", "Canada  British Columbia") ~ "Canada_British_Columbia",
country %in% c("Canada:  MB", "Canada:  Manitoba", "Canada  Manitoba") ~ "Canada_Manitoba",
country %in% c("Canada:  NB", "Canada:  New Brunswick", "Canada  New Brunswick") ~ "Canada_New_Brunswick",
country %in% c("Canada:  NL", "Canada:  Newfoundland", "Canada  Newfoundland","Canada:  Newfoundland and Labrador") ~ "Canada_Newfoundland_and_Labrador",
country %in% c("Canada:  NS", "Canada:  Nova Scotia", "Canada  Nova Scotia") ~ "Canada_Nova_Scotia",
country %in% c("Canada:  NT", "Canada:  Northwest Territories", "Canada  Northwest Territories") ~ "Canada_Northwest_Territories",
country %in% c("Canada:  ON", "Canada:  Ontario", "Canada  Ontario") ~ "Canada_Ontario",
) )
region_names <- tests_summary %>%
distinct(country) %>%
arrange(country)
region_names %>% pull(country)
tests_summary <- wikipedia_results %>%
group_by(country, as_of_date) %>%
summarise(total_tests = max(Tests),
positives = max(Positive),
tests_per_million = max(test_per_million),
positive_per_thousand_tests = max(positive_per_thousand_tests)) %>%
ungroup() %>%
arrange(desc(as_of_date),country)
tests_summary <- tests_summary %>%
mutate(country = case_when(
country %in% c("Canada:  AB", "Canada:  Alberta", "Canada  Alberta") ~ "Canada_Alberta",
country %in% c("Canada:  BC", "Canada:  British Columbia", "Canada  British Columbia") ~ "Canada_British_Columbia",
country %in% c("Canada:  MB", "Canada:  Manitoba", "Canada  Manitoba") ~ "Canada_Manitoba",
country %in% c("Canada:  NB", "Canada:  New Brunswick", "Canada  New Brunswick") ~ "Canada_New_Brunswick",
country %in% c("Canada:  NL", "Canada:  Newfoundland", "Canada  Newfoundland","Canada:  Newfoundland and Labrador") ~ "Canada_Newfoundland_and_Labrador",
country %in% c("Canada:  NS", "Canada:  Nova Scotia", "Canada  Nova Scotia") ~ "Canada_Nova_Scotia",
country %in% c("Canada:  NT", "Canada:  Northwest Territories", "Canada  Northwest Territories") ~ "Canada_Northwest_Territories",
country %in% c("Canada:  ON", "Canada:  Ontario", "Canada  Ontario") ~ "Canada_Ontario",
TRUE ~ country
) )
region_names <- tests_summary %>%
distinct(country) %>%
arrange(country)
region_names %>% pull(country)
tests_summary <- tests_summary %>%
mutate(country = case_when(
country %in% c("Canada:  AB", "Canada:  Alberta", "Canada  Alberta") ~ "Canada_Alberta",
country %in% c("Canada:  BC", "Canada:  British Columbia", "Canada  British Columbia") ~ "Canada_British_Columbia",
country %in% c("Canada:  MB", "Canada:  Manitoba", "Canada  Manitoba") ~ "Canada_Manitoba",
country %in% c("Canada:  NB", "Canada:  New Brunswick", "Canada  New Brunswick") ~ "Canada_New_Brunswick",
country %in% c("Canada:  NL", "Canada:  Newfoundland", "Canada  Newfoundland","Canada:  Newfoundland and Labrador") ~ "Canada_Newfoundland_and_Labrador",
country %in% c("Canada:  NS", "Canada:  Nova Scotia", "Canada  Nova Scotia") ~ "Canada_Nova_Scotia",
country %in% c("Canada:  NT", "Canada:  Northwest Territories", "Canada  Northwest Territories") ~ "Canada_Northwest_Territories",
country %in% c("Canada:  ON", "Canada:  Ontario", "Canada  Ontario") ~ "Canada_Ontario",
country %in% c("Canada:  PE", "Canada:  Prince Edward Island", "Canada  Prince Edward Island") ~ "Canada_Prince_Edward_Island",
country %in% c("Canada:  QC", "Canada:  Quebec", "Canada  Quebec") ~ "Canada_Quebec",
country %in% c("Canada:  SK", "Canada:  Saskatchewan", "Canada  Saskatchewan") ~ "Canada_Saskatchewan",
country %in% c("Canada:  YT", "Canada:  Yukon", "Canada  Yukon") ~ "Canada_Yukon",
country %in% c("China:  Guangdong", "China  Guangdong", "Mainland China  Guangdong") ~ "China_Guangdong",
country %in% c("Italy:  Emilia-Romagna", "Italy  Emilia-Romagna") ~ "Italy_Emilia-Romagna",
country %in% c("Italy:  Friuli Venezia Giulia", "Italy  Friuli Venezia Giulia") ~ "Italy_Friuli_Venezia_Giulia",
country %in% c("Italy:  Lombardy", "Italy  Lombardy") ~ "Italy_Lombardy",
country %in% c("Italy:  Veneto", "Italy  Veneto") ~ "Italy_Veneto",
country %in% c("Japan:  Tokyo", "Japan  Tokyo") ~ "Japan_Tokyo",
TRUE ~ country
) )
region_names <- tests_summary %>%
distinct(country) %>%
arrange(country)
region_names %>% pull(country)
tests_summary <- tests_summary %>%
mutate(country = case_when(
country %in% c("Canada:  AB", "Canada:  Alberta", "Canada  Alberta") ~ "Canada_Alberta",
country %in% c("Canada:  BC", "Canada:  British Columbia", "Canada  British Columbia") ~ "Canada_British_Columbia",
country %in% c("Canada:  MB", "Canada:  Manitoba", "Canada  Manitoba") ~ "Canada_Manitoba",
country %in% c("Canada:  NB", "Canada:  New Brunswick", "Canada  New Brunswick") ~ "Canada_New_Brunswick",
country %in% c("Canada:  NL", "Canada:  Newfoundland", "Canada  Newfoundland","Canada:  Newfoundland and Labrador") ~ "Canada_Newfoundland_and_Labrador",
country %in% c("Canada:  NS", "Canada:  Nova Scotia", "Canada  Nova Scotia") ~ "Canada_Nova_Scotia",
country %in% c("Canada:  NT", "Canada:  Northwest Territories", "Canada  Northwest Territories") ~ "Canada_Northwest_Territories",
country %in% c("Canada:  ON", "Canada:  Ontario", "Canada  Ontario") ~ "Canada_Ontario",
country %in% c("Canada:  PE", "Canada:  Prince Edward Island", "Canada  Prince Edward Island") ~ "Canada_Prince_Edward_Island",
country %in% c("Canada:  QC", "Canada:  Quebec", "Canada  Quebec") ~ "Canada_Quebec",
country %in% c("Canada:  SK", "Canada:  Saskatchewan", "Canada  Saskatchewan") ~ "Canada_Saskatchewan",
country %in% c("Canada:  YT", "Canada:  Yukon", "Canada  Yukon") ~ "Canada_Yukon",
country %in% c("China:  Guangdong", "China  Guangdong", "Mainland China  Guangdong") ~ "China_Guangdong",
country %in% c("Italy:  Emilia-Romagna", "Italy  Emilia-Romagna") ~ "Italy_Emilia-Romagna",
country %in% c("Italy:  Friuli Venezia Giulia", "Italy  Friuli Venezia Giulia") ~ "Italy_Friuli_Venezia_Giulia",
country %in% c("Italy:  Lombardy", "Italy  Lombardy") ~ "Italy_Lombardy",
country %in% c("Italy:  Veneto", "Italy  Veneto") ~ "Italy_Veneto",
country %in% c("Italy:  Veneto", "Italy  Veneto") ~ "Italy_Veneto",
country %in% c("Italy:  Marche") ~ "Italy_Marche",
country %in% c("Italy:  Piedmont") ~ "Italy_Piedmont",
country %in% c("Italy:  Tuscany") ~ "Italy_Tuscany",
country %in% c("Italy:  Liguria") ~ "Italy_Liguria",
country %in% c("United States", "United States (unofficial tracking)", "United States (unofficial)") ~ "United_States_of_America",
country %in% c("United States:  CA", "United States:  California", "United States  California") ~ "United_States_California",
TRUE ~ country
) )
region_names <- tests_summary %>%
distinct(country) %>%
arrange(country)
region_names %>% pull(country)
tests_summary <- tests_summary %>%
mutate(country = case_when(
country %in% c("Canada:  AB", "Canada:  Alberta", "Canada  Alberta") ~ "Canada_Alberta",
country %in% c("Canada:  BC", "Canada:  British Columbia", "Canada  British Columbia") ~ "Canada_British_Columbia",
country %in% c("Canada:  MB", "Canada:  Manitoba", "Canada  Manitoba") ~ "Canada_Manitoba",
country %in% c("Canada:  NB", "Canada:  New Brunswick", "Canada  New Brunswick") ~ "Canada_New_Brunswick",
country %in% c("Canada:  NL", "Canada:  Newfoundland", "Canada  Newfoundland","Canada:  Newfoundland and Labrador") ~ "Canada_Newfoundland_and_Labrador",
country %in% c("Canada:  NS", "Canada:  Nova Scotia", "Canada  Nova Scotia") ~ "Canada_Nova_Scotia",
country %in% c("Canada:  NT", "Canada:  Northwest Territories", "Canada  Northwest Territories") ~ "Canada_Northwest_Territories",
country %in% c("Canada:  ON", "Canada:  Ontario", "Canada  Ontario") ~ "Canada_Ontario",
country %in% c("Canada:  PE", "Canada:  Prince Edward Island", "Canada  Prince Edward Island") ~ "Canada_Prince_Edward_Island",
country %in% c("Canada:  QC", "Canada:  Quebec", "Canada  Quebec") ~ "Canada_Quebec",
country %in% c("Canada:  SK", "Canada:  Saskatchewan", "Canada  Saskatchewan") ~ "Canada_Saskatchewan",
country %in% c("Canada:  YT", "Canada:  Yukon", "Canada  Yukon") ~ "Canada_Yukon",
country %in% c("China:  Guangdong", "China  Guangdong", "Mainland China  Guangdong") ~ "China_Guangdong",
country %in% c("Italy:  Emilia-Romagna", "Italy  Emilia-Romagna") ~ "Italy_Emilia-Romagna",
country %in% c("Italy:  Friuli Venezia Giulia", "Italy  Friuli Venezia Giulia") ~ "Italy_Friuli_Venezia_Giulia",
country %in% c("Italy:  Lombardy", "Italy  Lombardy") ~ "Italy_Lombardy",
country %in% c("Italy:  Veneto", "Italy  Veneto") ~ "Italy_Veneto",
country %in% c("Italy:  Veneto", "Italy  Veneto") ~ "Italy_Veneto",
country %in% c("Italy:  Marche") ~ "Italy_Marche",
country %in% c("Italy:  Piedmont") ~ "Italy_Piedmont",
country %in% c("Italy:  Tuscany") ~ "Italy_Tuscany",
country %in% c("Italy:  Liguria") ~ "Italy_Liguria",
country %in% c("United States", "United States (unofficial tracking)", "United States (unofficial)") ~ "United_States_of_America",
country %in% c("United States:  CA", "United States:  California", "United States  California") ~ "United_States_California",
country %in% c("United States:  IL") ~ "United_States_Illinois",
country %in% c("United States:  FL", "United States:  Florida") ~ "United_States_Florida",
country %in% c("United States:  LA", "United States:  Louisiana") ~ "United_States_Louisiana",
country %in% c("United States:  MI", "United States:  Michigan") ~ "United_States_Michigan",
country %in% c("United States:  NJ", "United States:  New Jersey") ~ "United_States_New_Jersey",
country %in% c("United States:  NJ", "United States:  New Jersey") ~ "United_States_New_Jersey",
country %in% c("United States:  NY", "United States:  New York", "United States  New York") ~ "United_States_New_York",
country %in% c("United States:  TX", "United States:  Texas") ~ "United_States_Texas",
country %in% c("United States:  WA", "United States:  Washington", "United States  Washington") ~ "United_States_Washington",
TRUE ~ country
) )
region_names <- tests_summary %>%
distinct(country) %>%
arrange(country)
region_names %>% pull(country)
write_delim(tests_summary, "20200405_wikipedia_scrapes.txt", delim ="\t")
write_delim(region_name,"mapping_wiki.csv", delim = ";")
write_delim(region_names,"mapping_wiki.csv", delim = ";")
#Updating total tests----
mappings <- read_delim("C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper-covid19/mapping_wiki.csv", delim = ";")
wiki_scrapes <- read_delim("C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper/geomap/tools/20200405_wikipedia_scrapes.txt", delim = "\t")
wiki_scrapes <- wiki_scrapes %>%
mutate(Tests_per_capita = tests_per_million/1000000)
setwd("C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper/filesystem/Global")
files <- list.files(getwd())
files <- files[grep(pattern = ".txt", x = files)]
files <- files[!grepl(pattern = "accumulated.txt", x = files)]
dates_vec <- NULL
View(mappings)
wiki_scrapes <- read_delim("C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper/geomap/tools/20200405_wikipedia_scrapes.txt", delim = "\t")
View(wiki_scrapes)
tests_df <- wiki_scrapes %>%
left_join(mappings,
by = c("country" = "wiki_region"))
View(tests_df)
wiki_scrapes <- read_delim("C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper/geomap/tools/20200405_wikipedia_scrapes.txt", delim = "\t")
wiki_scrapes <- wiki_scrapes %>%
mutate(Tests_per_capita = tests_per_million/1000000)
tests_df <- wiki_scrapes %>%
left_join(mappings,
by = c("country" = "wiki_region"))
tests_df <- wiki_scrapes %>%
left_join(mappings,
by = c("country" = "wiki_region")) %>%
rename(Tests = total_tests)
date <- dates_vec[1]
today_filename <- paste(prefix,date,".txt", sep = "")
prefix <- "Global-Country_"
today_filename <- paste(prefix,date,".txt", sep = "")
today_df <- read_delim(today_filename, delim = "\t")
dates_vec <- NULL
for (filename in files){
date <- filename %>%
stri_extract_all(regex = "\\d{4}-\\d{2}-\\d{2}") %>%
unlist()
dates_vec <- c(dates_vec,date)
}
setwd("C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper/filesystem/Global")
files <- list.files(getwd())
files <- files[grep(pattern = ".txt", x = files)]
files <- files[!grepl(pattern = "accumulated.txt", x = files)]
dates_vec <- NULL
for (filename in files){
date <- filename %>%
stri_extract_all(regex = "\\d{4}-\\d{2}-\\d{2}") %>%
unlist()
dates_vec <- c(dates_vec,date)
}
library(stringi)
for (filename in files){
date <- filename %>%
stri_extract_all(regex = "\\d{4}-\\d{2}-\\d{2}") %>%
unlist()
dates_vec <- c(dates_vec,date)
}
date <- dates_vec[1]
today_filename <- paste(prefix,date,".txt", sep = "")
today_df <- read_delim(today_filename, delim = "\t")
total_tests_df <- tests_df %>%
filter(as_of_date == date) %>%
select(covidmapper_region, Tests, Tests_per_capita)
today_df <- today_df %>%
bind_rows()
today_df <- today_df %>%
left_join(total_tests_df,
by = c("Name" = "covidmapper_region"))
View(today_df)
write_delim(today_df,today_filename, sep = "\t")
write_delim(today_df,today_filename, delim = "\t")
prefix <- "Global-Country_"
for (date in dates_vec){
today_filename <- paste(prefix,date,".txt", sep = "")
today_df <- read_delim(today_filename, delim = "\t")
total_tests_df <- tests_df %>%
filter(as_of_date == date) %>%
select(covidmapper_region, Tests, Tests_per_capita)
today_df <- today_df %>%
left_join(total_tests_df,
by = c("Name" = "covidmapper_region"))
write_delim(today_df,today_filename, delim = "\t")
}
setwd("C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper/filesystem/Global/North_America")
files <- list.files(getwd())
files <- files[grep(pattern = ".txt", x = files)]
files <- files[!grepl(pattern = "accumulated.txt", x = files)]
dates_vec <- NULL
for (filename in files){
date <- filename %>%
stri_extract_all(regex = "\\d{4}-\\d{2}-\\d{2}") %>%
unlist()
dates_vec <- c(dates_vec,date)
}
prefix <- "North_America_"
for (date in dates_vec){
today_filename <- paste(prefix,date,".txt", sep = "")
today_df <- read_delim(today_filename, delim = "\t")
total_tests_df <- tests_df %>%
filter(as_of_date == date) %>%
select(covidmapper_region, Tests, Tests_per_capita)
today_df <- today_df %>%
left_join(total_tests_df,
by = c("Name" = "covidmapper_region"))
write_delim(today_df,today_filename, delim = "\t")
}
setwd("C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper/filesystem/Global/North_America/Canada")
prefix <- "Canada_"
for (date in dates_vec){
today_filename <- paste(prefix,date,".txt", sep = "")
today_df <- read_delim(today_filename, delim = "\t")
total_tests_df <- tests_df %>%
filter(as_of_date == date) %>%
select(covidmapper_region, Tests, Tests_per_capita)
today_df <- today_df %>%
left_join(total_tests_df,
by = c("Name" = "covidmapper_region"))
write_delim(today_df,today_filename, delim = "\t")
}
setwd("C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper/filesystem/Global/North_America/United_States_of_America")
prefix <- "United_States_of_America_"
for (date in dates_vec){
today_filename <- paste(prefix,date,".txt", sep = "")
today_df <- read_delim(today_filename, delim = "\t")
total_tests_df <- tests_df %>%
filter(as_of_date == date) %>%
select(covidmapper_region, Tests, Tests_per_capita)
today_df <- today_df %>%
left_join(total_tests_df,
by = c("Name" = "covidmapper_region"))
write_delim(today_df,today_filename, delim = "\t")
}
setwd("C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper/filesystem/Global/Africa")
prefix <- "Africa_"
for (date in dates_vec){
today_filename <- paste(prefix,date,".txt", sep = "")
today_df <- read_delim(today_filename, delim = "\t")
total_tests_df <- tests_df %>%
filter(as_of_date == date) %>%
select(covidmapper_region, Tests, Tests_per_capita)
today_df <- today_df %>%
left_join(total_tests_df,
by = c("Name" = "covidmapper_region"))
write_delim(today_df,today_filename, delim = "\t")
}
setwd("C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper/filesystem/Global/Asia")
prefix <- "Asia_"
for (date in dates_vec){
today_filename <- paste(prefix,date,".txt", sep = "")
today_df <- read_delim(today_filename, delim = "\t")
total_tests_df <- tests_df %>%
filter(as_of_date == date) %>%
select(covidmapper_region, Tests, Tests_per_capita)
today_df <- today_df %>%
left_join(total_tests_df,
by = c("Name" = "covidmapper_region"))
write_delim(today_df,today_filename, delim = "\t")
}
prefix <- "Europe_"
setwd("C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper/filesystem/Global/Europe")
prefix <- "Europe_"
for (date in dates_vec){
today_filename <- paste(prefix,date,".txt", sep = "")
today_df <- read_delim(today_filename, delim = "\t")
total_tests_df <- tests_df %>%
filter(as_of_date == date) %>%
select(covidmapper_region, Tests, Tests_per_capita)
today_df <- today_df %>%
left_join(total_tests_df,
by = c("Name" = "covidmapper_region"))
write_delim(today_df,today_filename, delim = "\t")
}
setwd("C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper/filesystem/Global/Oceania")
prefix <- "Oceania_"
for (date in dates_vec){
today_filename <- paste(prefix,date,".txt", sep = "")
today_df <- read_delim(today_filename, delim = "\t")
total_tests_df <- tests_df %>%
filter(as_of_date == date) %>%
select(covidmapper_region, Tests, Tests_per_capita)
today_df <- today_df %>%
left_join(total_tests_df,
by = c("Name" = "covidmapper_region"))
write_delim(today_df,today_filename, delim = "\t")
}
prefix <- "South_America_"
for (date in dates_vec){
today_filename <- paste(prefix,date,".txt", sep = "")
today_df <- read_delim(today_filename, delim = "\t")
total_tests_df <- tests_df %>%
filter(as_of_date == date) %>%
select(covidmapper_region, Tests, Tests_per_capita)
today_df <- today_df %>%
left_join(total_tests_df,
by = c("Name" = "covidmapper_region"))
write_delim(today_df,today_filename, delim = "\t")
}
setwd("C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper/filesystem/Global/South_America")
for (date in dates_vec){
today_filename <- paste(prefix,date,".txt", sep = "")
today_df <- read_delim(today_filename, delim = "\t")
total_tests_df <- tests_df %>%
filter(as_of_date == date) %>%
select(covidmapper_region, Tests, Tests_per_capita)
today_df <- today_df %>%
left_join(total_tests_df,
by = c("Name" = "covidmapper_region"))
write_delim(today_df,today_filename, delim = "\t")
}
shiny::runApp('C:/Users/jaanu/Nextcloud/Documents/postdoc/random/heatmapper/geomap')
